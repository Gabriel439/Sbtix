package se.nullable.sbtix

import sbt._
import sbt.ProjectRef
import sbt.{ Logger, ModuleID, Resolver, PatternsBasedRepository }

object NixWriter {
  def apply(repos: Seq[NixRepo], artifacts: Seq[NixArtifact]) = {
    s"""# This file was automatically generated by Sbtix. Do not edit manually.
        |{
        |  ${indent(NixRepoCollection(repos).toNix)}
        |  ${indent(NixArtifactCollection(artifacts).toNix)}
        |}
        |""".stripMargin
  }
}

trait NixBuilder {
  def toNix = s"$toNixRef = $toNixValue;"
  def toNixRef: String
  def toNixValue: String
}

case class NixRepoCollection(repos: Seq[NixRepo]) extends NixBuilder {
  def toNixRef = quote("repos")

  def toNixValue: String =
    s"""{
        |  ${indent(repos.distinct.map(_.toNix).mkString("\r\n"))}
        |}""".stripMargin
}

case class NixRepo(name: String, pattern: Option[String]) extends NixBuilder {
  def toNixRef = quote(name)

  def toNixValue: String = quote(pattern.getOrElse(""));
}

case class NixArtifactCollection(artifacts: Seq[NixArtifact]) extends NixBuilder {
  def toNixRef = quote("artifacts")

  def toNixValue: String =
    s"""{
        |  ${indent(artifacts.distinct.map(_.toNix).mkString("\r\n"))}
        |}""".stripMargin

}

case class NixArtifact(repoName: String, relative: String, url: String, sha256: String) extends NixBuilder {
  def toNixRef = s"${quote(repoName + "/" + relative)}"

  def toNixValue =
    s"""{
        |  url = ${quote(url)};
        |  sha256 = ${quote(sha256)};
        |}""".stripMargin
}