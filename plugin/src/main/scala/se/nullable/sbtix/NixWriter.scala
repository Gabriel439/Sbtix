package se.nullable.sbtix

import sbt._
import sbt.ProjectRef
import se.nullable.sbtix.NixPluginUtils._
import sbt.{Logger, ModuleID, Resolver, PatternsBasedRepository}
import se.nullable.sbtix.NixPluginUtils.indent

object NixWriter {

  def apply(logger:Logger, modules: Seq[GenericModule], resolvers: Seq[Resolver]) = {

      //flatMap, so if we don't have any artifacts in a repository then we discard that repository
      val (repos,artifacts) = resolvers.flatMap(NixResolver.resolve(logger,modules)).unzip

      s"""# This file was automatically generated by Sbtix. Do not edit manually.
          |{
          |  ${indent(NixRepoCollection(repos).toNix)}
          |  ${indent(NixArtifactCollection(artifacts.flatten).toNix)}
          |}
          |""".stripMargin
  }
}

object NixResolver {

  def resolve(logger:Logger, modules: Seq[GenericModule])(resolver:Resolver) = {
   val nixResolver = resolver match {
      case ivy: PatternsBasedRepository => 
        val pat = ivy.patterns.artifactPatterns.head
        val endIndex = pat.indexOf("[")
        val root = pat.substring(0,endIndex)
        val pattern = pat.substring(endIndex)
        NixResolver(ivy.name,root,Some(pattern)) 
      case mvn: MavenRepository => NixResolver(mvn.name,mvn.root,None)
      case cr : ChainedResolver => ???
      case jn1 : JavaNet1Repository => ???
      case raw : RawRepository => ???
    }

    nixResolver.filterArtifacts(logger,modules)
  }
}

case class NixResolver(private val name:String,rootUrl:String, pattern: Option[String]) {
  private val repoName = "nix-" + name

  private def isMatch(mod:GenericModule) = mod.url.toString.startsWith(rootUrl)
  private val nixRepo = NixRepo(repoName,pattern)
  private val findArtifacts = FindArtifacts(repoName,rootUrl) _

  private[NixResolver] def filterArtifacts(logger:Logger,modules: Seq[GenericModule]) = {
      modules.filter(isMatch) match {
        case Nil => None
        case mods => Some((nixRepo,findArtifacts(logger,mods)))
      }
  }
}

trait NixBuilder {
   def toNix = s"$toNixRef = $toNixValue;"
   def toNixRef : String
   def toNixValue : String
}

case class NixRepoCollection(repos: Seq[NixRepo])  extends NixBuilder {
  def toNixRef = quote("repos")

  def toNixValue: String =
      s"""{
          |  ${indent(repos.map(_.toNix).mkString("\r\n"))}
          |}""".stripMargin 
  
}


case class NixRepo(name:String,pattern:Option[String])  extends NixBuilder {
  def toNixRef = quote(name)

  def toNixValue: String = quote(pattern.getOrElse(""));

}

case class NixArtifactCollection(artifacts: Seq[NixArtifact])  extends NixBuilder {
  def toNixRef = quote("artifacts")

  def toNixValue: String = 
      s"""{
          |  ${indent(artifacts.map(_.toNix).mkString("\r\n"))}
          |}""".stripMargin

}

case class NixArtifact(repoName:String, relative: String, url: URL, sha256: String) extends NixBuilder {
  def toNixRef = s"${quote(repoName + "/" + relative.stripPrefix("/"))}"

  def toNixValue =
    s"""{
        |  url = ${quote(url.toString)};
        |  sha256 = ${quote(sha256)};
        |}""".stripMargin
}